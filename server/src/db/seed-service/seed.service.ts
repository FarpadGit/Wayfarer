import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Category } from '../entities/category.entity';
import { Comment } from '../entities/comment.entity';
import { Like } from '../entities/like.entity';
import { Post } from '../entities/post.entity';
import { Image } from '../entities/image.entity';
import { User } from '../entities/user.entity';

@Injectable()
export class SeedService {
  constructor(
    @InjectRepository(User) private readonly userRepo: Repository<User>,
    @InjectRepository(Category)
    private readonly categoryRepo: Repository<Category>,
    @InjectRepository(Post) private readonly postRepo: Repository<Post>,
    @InjectRepository(Image) private readonly imageRepo: Repository<Image>,
    @InjectRepository(Comment)
    private readonly commentRepo: Repository<Comment>,
    @InjectRepository(Like) private readonly likeRepo: Repository<Like>,
  ) {}

  async seed() {
    await this.categoryRepo.delete({});
    await this.postRepo.delete({});
    await this.imageRepo.delete({});
    await this.commentRepo.delete({});
    await this.likeRepo.delete({});
    await this.userRepo.delete({});

    const admin = this.userRepo.create({
      email: 'WF_ADMIN',
      name: 'WF_ADMIN',
      oauth2_sub: '',
    });
    await this.userRepo.save(admin);

    const guest = this.userRepo.create({
      email: 'WF_GUEST',
      name: 'WF_GUEST',
      oauth2_sub: '',
    });
    await this.userRepo.save(guest);

    const category1 = this.categoryRepo.create({
      title: '√údv a Wayfarer-en üëã',
      creator: admin,
    });
    await this.categoryRepo.save(category1);

    const post5 = new Post();
    post5.title = 'N√©vjegy';
    post5.body = `Hell√≥, k√∂sz hogy mindegyik bejegyz√©sen v√©gigkattintott√°l. Fab√≥k √Årp√°d informatikus vagyok √©s ha k√≠v√°ncsi vagy a t√∂bbi munk√°mra is akkor megtal√°lhatsz a https://www.fabokarpad.hu weboldalon. Ide t√∂lt√∂m fel a portf√≥li√≥s √©s egy√©b eml√≠t√©sre m√©lt√≥ projektjeimet, valamint itt tal√°lod a k√©pes√≠t√©seimet √©s az el√©rhet≈ës√©gemet is. Bizony megesik, hogy n√©ha a szabadid≈ëmben ilyen projekteket csin√°lok a saj√°t jobb bel√°t√°som ellen√©re.`;
    post5.uploader = admin;
    post5.category = category1;

    await this.postRepo.save(post5);

    const post4 = new Post();
    post4.title = 'Technikai r√©szletek, f√ºgg≈ës√©gek, telep√≠t√©s';
    post4.body = `Ja, √©s ne tudd meg mennyit kellett szenvednem mire m≈±k√∂d√©sbe tudtam hozni ezt az oldalt a Vercelen. Kellett nekem egy egzotikus monorep√≥val sz√≥rakoznom üôÑ...
          El≈ësz√∂r is a backend Typescriptben van meg√≠rva amit el≈ësz√∂r √∂ssze kell √°ll√≠tani Javascriptt√© √©s k√ºl√∂n felt√∂lteni mert NodeJs projektekn√©l csak azt tudja futtatni a platform. Ezen t√∫l Express helyett Fastify-t haszn√°lok, amit egy k√ºl√∂n default export√°lt met√≥dussal kell ell√°tni, hogy a megfelel≈ë bel√©p√©si ponton tudja futtatni mint serverless functiont.
          Ezut√°n kell m√©g egy vercel.json nev≈± konfigur√°ci√≥s f√°jl is mind a backend, mind a frontend k√∂nyvt√°r√°ba ami t√∂bbek k√∂zt √°tir√°ny√≠tja a webk√©r√©seket hogy SPA oldalk√©nt tudjon m≈±k√∂dni, illetve hogy fejl√©ceket √°ll√≠tson be a CORS miatt.
          Ja, √©s mivel a backend az adatb√°zissal Prisma ORM-en kereszt√ºl kommunik√°l ez√©rt azt is √∫jra migr√°lni kell minden build parancs elej√©n a platform oldalon hogy biztos szinkronban legyen a DB-vel...
          √âs valami√©rt m√©g az Angular frontendnek is k√ºl√∂n meg kell adnia, hogy milyen mapp√°ban keresse a leford√≠tott k√©sz f√°jlokat. (Alapvet≈ëen a 'dist/<project k√∂nyvt√°r>/browser' helyre ford√≠t az ng build parancs, de ezt nem felt√©telezi alapb√≥l, ne k√©rdezd mi√©rt.)
          Tal√°n most m√°r m≈±k√∂dik ü§û.`;
    post4.uploader = admin;
    post4.category = category1;

    await this.postRepo.save(post4);

    const comment4_1 = new Comment();
    comment4_1.message = `Ami a f√ºgg≈ës√©geket illeti, el≈ësz√∂r is a szervernek k√ºld√∂tt k√©r√©seket az Axios k√∂nyvt√°rcsomagon kereszt√ºl int√©zi a weboldal. A felugr√≥ ablakokhoz (b√°r a t√∂bbs√©ge ink√°bb "leugr√≥") egy ngx-modal-ease nev≈± csomagot haszn√°l, a poszt lista lapozhat√≥v√° t√©tel√©hez ngx-pagination-t, illetve a Google fi√≥kos bejelentkez√©s√©rt az angular-oauth2-oidc nev≈± csomag felel.
          Ezeken t√∫l m√©g egy ngx-linky nev≈± k√∂nyvt√°rat is haszn√°l ami automatikusan linkekk√© v√°ltoztatja a posztokban szerepl≈ë email c√≠meket, weboldal url-eket, stb., valamint egy√©b kisebb ikonok is be lettek import√°lva az ng-icons k√∂nyvt√°rb√≥l.`;
    comment4_1.user = admin;
    comment4_1.post = post4;

    await this.commentRepo.save(comment4_1);

    const comment4_2 = new Comment();
    comment4_2.parent = comment4_1;
    comment4_2.message = `A Google bel√©ptet√©shez eredetileg az abacritt f√©le angularx-social-login k√∂nyvt√°rral pr√≥b√°lkoztam mivel az els≈ë visszajelz√©sek szerint ez a k√∂zkedvelt megold√°s erre a feladatra. Azonban mint kider√ºlt ennek a csomagnak van egy olyan kisebb sz√©ps√©ghib√°ja (bug?), hogy az oldal √∫jrat√∂lt√©sekor elveszik a bejelentkez√©si token √©s a felhaszn√°l√≥nak √∫jra be kell l√©pnie a Google fi√≥kj√°ba, √≠gy √°tt√©rtem egy robosztusabb megold√°sra.`;
    comment4_2.user = admin;
    comment4_2.post = post4;

    await this.commentRepo.save(comment4_2);

    const post3 = new Post();
    post3.title = 'Sz√≥val hogyan is m≈±k√∂dik ez?';
    post3.body = `Maga a frontend oldal (amit most l√°tsz) Angular 17+ keretrendszerrel k√©sz√ºlt ami TypeScript 5.3 √©s SCSS st√≠luslapokat haszn√°l. A szerver oldal ami egy PostgreSQL adatb√°zissal kommunik√°l √©s fogadja a k√©r√©seket egy Node.js-ben √≠rt REST API ami egy Fastify nev≈± web keretrendszerre √©p√ºl √©s Prisma-n kereszt√ºl kommunik√°l a DB-vel.
          Ez a szerver minden kliens oldali k√©r√©s v√°lasz√°hoz egy cookie-t √©s egy saj√°t fejl√©cet csatol amivel azonos√≠tja a felhaszn√°l√≥t aki a k√©r√©st int√©zte (vend√©g vagy bejelentkezett). Ez alapj√°n tudja a b√∂ng√©sz≈ë √∂sszehasonl√≠tani, hogy pl. az adott poszt szerz≈ëje van-e bejelentkezve.
          Ha √©rdekel a forr√°sk√≥d itt megtal√°lhatod, mindk√©t projekt egy monorepo-ban van: https://www.github.com/FarpadGit/Wayfarer`;
    post3.uploader = admin;
    post3.category = category1;

    await this.postRepo.save(post3);

    const comment3_1 = new Comment();
    comment3_1.message = `Amikor l√©trehozol egy √∫j kommentet (vagy szerkeszted, vagy t√∂rl√∂d, stb.) ezt a v√°ltoz√°st a b√∂ng√©sz≈ë el≈ësz√∂r elk√ºldi a szerver oldali adatb√°zisnak, de nem v√°rja meg a v√°lasz√°t, azonnal helyben elv√©gzi an√©lk√ºl hogy a t√∂bbi kommentet √∫jrat√∂lten√©. √öj posztok vagy j√°r√°sok (kateg√≥ri√°k) l√©trehoz√°sakor ez kicsit m√°sk√©pp van, ekkor val√≥ban k√©r egy teljes √∫jralek√©rdez√©st az √∂sszes relev√°ns adatr√≥l miut√°n a besz√∫r√°s/t√∂rl√©s megt√∂rt√©nt.
            Ez f≈ëleg a listan√©zet lapozhat√≥s√°g√°t szolg√°lja. (A jelenlegi be√°ll√≠t√°s hogy 6 posztot l√°tsz oldalank√©nt, leg√∫jabbt√≥l a legr√©gebbig.) √âs term√©szetesen egy poszt megnyit√°sakor szint√©n szinkronba ker√ºlsz a szerver oldali √°llapottal.`;
    comment3_1.user = admin;
    comment3_1.post = post3;

    await this.commentRepo.save(comment3_1);

    const comment3_2 = new Comment();
    comment3_2.parent = comment3_1;
    comment3_2.message = `√âs igen, ezeket a bemutatkoz√≥ posztokat is h√°tulr√≥l el≈ëre t√∂lt√∂ttem fel hogy a leg√∫jabb legyen legfel√ºl. Pontosabban a seed f√°jlban vannak fejjel lefel√©.`;
    comment3_2.user = admin;
    comment3_2.post = post3;

    await this.commentRepo.save(comment3_2);

    const post2 = new Post();
    post2.title = 'Ez az iz√© mozog!';
    post2.body = `Csinos kis anim√°ci√≥, ugye? K√°r, hogy egy kisebb √°llapotg√©pet kellett √∂sszeraknom √©rte. (Kulcssz√≥ a 'kisebb', b√°r ez kezd egyre relat√≠vabb lenni. Szerencs√©re Redux/NgRx-n√©l m√©g nem tartunk.)
          Ha hiszed ha nem az oldal legels≈ë v√°ltozat√°ban ezt √∫gy oldottam meg, hogy CSS kulcs anim√°ci√≥kat l√°ncoltam √∂ssze callback esem√©nyeken kereszt√ºl. Minden HTML elemnek van egy onAnimationEnd esem√©nye amit akkor s√ºt el ha egy st√≠luslapban defini√°lt anim√°ci√≥ja befejezte a lej√°tsz√°s√°t. Ha ezen esem√©nyhez hozz√°adunk egy callback met√≥dust akkor egy tetsz≈ëlegesen hossz√∫, eszterl√°ncba k√∂t√∂tt anim√°ci√≥sorozatot tudunk l√©trehozni.
          Ennek a m√≥dszernek megvoltak az el≈ënyei √©s h√°tr√°nyai, az egyik k√∂z√ºl√ºk hogy lehet≈ëleg mindig csak egy m√°sik, m√©g nem anim√°lt elem oszt√°ly√°t lehetett megv√°ltoztatni k√∂vetkez≈ë l√©p√©sk√©nt.
          A mostani v√°ltozat az Angular saj√°t anim√°ci√≥s modulj√°t haszn√°lja ami felett√©bb nagy hatalm√∫, de ugyanakkor k√∂nnyen t√∫l is tud b√∫rj√°nozni az √°llapot √°tmeneti lista.`;
    post2.uploader = admin;
    post2.category = category1;

    await this.postRepo.save(post2);

    const comment2_1 = new Comment();
    comment2_1.message = `Ja, √©s az a hossz√∫ anim√°ci√≥ amiben √∂sszecsuk√≥dnak meg leg√∂rd√ºlnek a dolgok csak egyszer j√°tsz√≥dik le. A tov√°bbiakban egy r√∂vid√≠tett elhom√°lyosod√°s veszi √°t a hely√©t hogy ne lehessen olyan hamar megunni. Ha m√©g egyszer akarod l√°tni akkor friss√≠tened kell az oldalt.`;
    comment2_1.user = admin;
    comment2_1.post = post2;

    await this.commentRepo.save(comment2_1);

    const comment2_2 = new Comment();
    comment2_2.message = `Maga a banner/h√°tt√©rk√©p amit anim√°lni l√°tsz egy k√ºl√∂n komponens amit egy saj√°t service mozgat √°llapotok k√∂zti l√©pked√©sekkel. Ezek az √°llapotok Angular signal-okban vannak t√°rolva amikhez mindegyik komponensnek hozz√°f√©r√©se van √©s effect-ekben reag√°lhat a v√°ltoz√°saikra.`;
    comment2_2.user = admin;
    comment2_2.post = post2;

    await this.commentRepo.save(comment2_2);

    const comment2_3 = new Comment();
    comment2_3.parent = comment2_2;
    comment2_3.message = `S≈ët, m√©g az oldalak k√∂zti tranz√≠ci√≥t is egy √°llapotg√©p ir√°ny√≠tja, mivel elnavig√°l√°skor el≈ësz√∂r sz√©pen megv√°rja hogy az √∫j oldal h√°tt√©rk√©pe teljesen bet√∂lt≈ëdj√∂n (a HTML elem megh√≠vja az onLoad esem√©nyt) √©s csak ut√°na l√©p tov√°bb.
          Am√≠g ez nem t√∂rt√©nik meg addig kitartja a banner k√©pet mint aff√©le bet√∂lt√©s indik√°tort √©s nem v√°lt oldalt. (Az √∫j h√°tt√©rk√©pet egy k√ºl√∂n <img> tag foglalja mag√°ban a komponensben, csak n√©ha rejtve marad hogy a banner k√©p legyen l√°that√≥.)`;
    comment2_3.user = admin;
    comment2_3.post = post2;

    await this.commentRepo.save(comment2_3);

    const comment2_4 = new Comment();
    comment2_4.parent = comment2_3;
    comment2_4.message = `(Beismerem, hogy SEO szempontokb√≥l ez a megold√°s val√≥sz√≠n≈±leg nem nagyon lenne szimpatikus a crawlereknek, de most ezt nem is akartam hogy szempont legyen.)`;
    comment2_4.user = admin;
    comment2_4.post = post2;

    await this.commentRepo.save(comment2_4);

    const post1 = new Post();
    post1.title = '√öj j√∂vev√©nyek itt kezdjenek';
    post1.body = `L√©gy √ºdv√∂z√∂lve, v√°ndor!
      Fab√≥k √Årp√°d webfejleszt≈ë vagyok, √©s ez az oldal egy aff√©le hobbi projekt amivel meg akartam tan√≠tani magamnak az Angular 17+-ot.
      L√©nyeg√©ben egy Reddithez hasonl√≥ be√°gyazott komment √©s tartalom √©rt√©kel≈ë oldal ami egy szerver oldali Postgres adatb√°zisban t√°rolja a bejegyz√©seket, √©s aki Google fi√≥kj√°n kereszt√ºl bejelentkezik az √≠rhat saj√°t posztokat is, illetve hagyhat megjegyz√©seket m√°sok √≠r√°sain.
      (Ez a bejelentkez√©s nem k√∂telez≈ë, ha ink√°bb nem szeretn√©l ilyen m√≥don bel√©pni akkor is haszn√°lhatod a k√∂z√∂sen megosztott vend√©g fi√≥kot ugyanezen c√©lokra, csak ehhez mindenkinek hozz√°f√©r√©se van √©s b√°rki fel√ºl√≠rhatja amit csin√°lt√°l.)`;
    post1.uploader = admin;
    post1.category = category1;

    await this.postRepo.save(post1);

    const comment1_1 = new Comment();
    comment1_1.message = `Ezeken t√∫l tudsz m√©g kommenteket l√°jkolni, √≠rni, szerkeszteni, t√∂r√∂lni, √∂sszecsukni be√°gyazott komment f√°kat a t≈ël√ºk balra l√©v≈ë vonalra kattintva, vagy √≠rni √∫j posztokat a f≈ëoldalon kereszt√ºl. Szerintem viszonylag mag√°t√≥l √©rthet≈ëd≈ë a legt√∂bb r√©sz de ha k√©rd√©sed lenne ne tartsalak vissza :)`;
    comment1_1.user = admin;
    comment1_1.post = post1;

    await this.commentRepo.save(comment1_1);

    const comment1_2 = new Comment();
    comment1_2.message = `Bejelentkezni a jobb fels≈ë sarokban tal√°lhat√≥ gombon kereszt√ºl lehet, √©s minden √∫jonnan valid√°lt Google fi√≥k email c√≠me elment√©sre ker√ºl az adatb√°zisban.
      Aki ezt nem szeretn√© √©s csak kipr√≥b√°ln√° hogy melyik gomb mit csin√°l az nyugodtan maradhat a vend√©g fi√≥kn√°l, alap√©rtelmezetten ide vagy bejelentkezve.`;
    comment1_2.user = admin;
    comment1_2.post = post1;

    await this.commentRepo.save(comment1_2);

    const comment1_3 = new Comment();
    comment1_3.parent = comment1_2;
    comment1_3.message =
      'Bejelentkezett felhaszn√°l√≥k √≠r√°sait azonban m√°sok nem t√∂r√∂lhetik, szerkeszthetik illetve a like-jaikat nem v√°ltoztathatj√°k. Csak √©n. Nekem mindent szabad üòè.';
    comment1_3.user = admin;
    comment1_3.post = post1;

    await this.commentRepo.save(comment1_3);
  }
}
